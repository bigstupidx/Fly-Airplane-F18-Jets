using System.Collections.Generic;
using System.IO;
using System.Linq;
using MilitaryDemo;
using UnityEditor;
using UnityEngine;
using System.Collections;

public class ChangeObjectsTag : MonoBehaviour
{
    private const string cTargetTag = "Death";

    [MenuItem("GameObject/SetTag")]
    private static void ChangeTag()
    {
        GameObject selection = Selection.gameObjects.FirstOrDefault();
        SetTag(selection);
    }

    private static void SetTag(GameObject gameObject)
    {
        gameObject.tag = cTargetTag;

        foreach (Transform t in gameObject.transform)
        {
            SetTag(t.gameObject);
        }
    }

    [MenuItem("GameObject/Populate")]
    private static void CreateInArea()
    {
        var gos = Selection.gameObjects;


        const int count = 100;

        GameObject parent = new GameObject("AutoGenerated");


        Vector3 from = new Vector3(-5000, 0, -5000);
        Vector3 to = new Vector3(5000, 0, 5000);

        for (int i = 0; i < count; i++)
        {
            var prefab = gos[RandomTool.NextInt(0, gos.Count() - 1)];

            var go =
                GameObject.Instantiate(prefab,
                    gos[0].transform.position +
                    new Vector3(RandomTool.NextSingle(from.x, to.x), 0, RandomTool.NextSingle(from.z, to.z)),
                    Quaternion.identity) as GameObject;
            go.transform.parent = parent.transform;
        }
    }

    private const string ID = "PlaneBack";
    [MenuItem("GameObject/Combine")]
    private static void Combine()
    {
        GameObject gameObject = new GameObject("Combined" + ID);
        MeshRenderer renderer = gameObject.AddComponent<MeshRenderer>();
        MeshFilter filter = gameObject.AddComponent<MeshFilter>();
        Mesh mesh = new Mesh();


        int vertCount = 0;
        var filters =
            Selection.GetTransforms(SelectionMode.Deep).Select(p => p.GetComponent<MeshFilter>()).Where(p=>p != null && p.sharedMesh!= null);
        var renderers =
            Selection.GetTransforms(SelectionMode.Deep).Select(p => p.GetComponent<MeshRenderer>()).Where(p => p != null).ToList();

        List<Texture2D> textures = new List<Texture2D>();

        foreach (MeshRenderer f in renderers)
        {
            if (!textures.Contains(f.sharedMaterial.mainTexture as Texture2D))
            {
                textures.Add(f.sharedMaterial.mainTexture as Texture2D);
            }
        }
        
    //    Texture2D atlas = new Texture2D(1024, 1024);
        //var rects = atlas.PackTextures(textures.ToArray(), 1, 1024, false);


        foreach (MeshFilter f in filters)
        {
            vertCount += f.sharedMesh.vertices.Count();
        }


        int normalsCount = 0;

        foreach (MeshFilter f in filters)
        {
            normalsCount += f.sharedMesh.normals.Count();
        }

        int uvCount = 0;

        foreach (MeshFilter f in filters)
        {
            uvCount += f.sharedMesh.uv.Count();
        }

        int triangles = 0;

        foreach (MeshFilter f in filters)
        {
            triangles += f.sharedMesh.triangles.Count();
        }

        int tangentsCount = 0;


        foreach (MeshFilter f in filters)
        {
            tangentsCount += f.sharedMesh.tangents.Count();
        }


//        var associatedTextures = new Dictionary<MeshFilter, Texture2D>();
//
//        foreach (MeshFilter f in filters)
//        {
//            associatedTextures[f] = f.GetComponent<MeshRenderer>().sharedMaterial.mainTexture as Texture2D;
//        }

       var vertices = new Vector3[vertCount];
        var uvs = new Vector2[uvCount];
        var normals = new Vector3[normalsCount];
       var mtriangles = new int[triangles];
       var tangents = new Vector4[tangentsCount];


        int v = 0;
        int n = 0;
        int uv = 0;
        int t = 0;
        int tan = 0;
        int offset = 0;

        foreach (MeshFilter f in filters)
        {


            for (int i = 0; i < f.sharedMesh.vertices.Length; i++)
            {
                vertices[v++] = f.transform.TransformPoint(f.sharedMesh.vertices[i]);
            }

            for (int i = 0; i < f.sharedMesh.normals.Length; i++)
            {
                normals[n++] = f.sharedMesh.normals[i];
            }

            for (int i = 0; i < f.sharedMesh.tangents.Length; i++)
            {
                tangents[tan++] = f.sharedMesh.tangents[i];
            }

            for (int i = 0; i < f.sharedMesh.uv.Length; i++)
            {
//
//                Rect rect = rects[textures.IndexOf(associatedTextures[f])];
//
//
//                Vector2 lastUV = f.sharedMesh.uv[i];
//                Vector2 newUV = new Vector2(rect.x +rect.width*lastUV.x, rect.y +rect.height*lastUV.y);
                Vector2 newUV = f.sharedMesh.uv[i];
              uvs[uv++] = newUV;
            }

            for (int i = 0; i < f.sharedMesh.triangles.Length; i++)
            {
                mtriangles[t++] = offset + f.sharedMesh.triangles[i];
            }

            offset += f.sharedMesh.vertices.Length;
        }

        mesh.vertices = vertices;
        mesh.triangles = mtriangles;
        mesh.uv = uvs;
        mesh.normals = normals;
        mesh.tangents = tangents;
        mesh.RecalculateBounds();

        filter.sharedMesh = mesh;
        renderer.sharedMaterial = new Material(Shader.Find("Mobile/Unlit (Supports Lightmap)"));


       // renderer.sharedMaterial.mainTexture = atlas;


    //    File.WriteAllBytes("Assets/Combined/CombinedAtlas"+ID + ".png", atlas.EncodeToPNG());
       // AssetDatabase.CreateAsset(, "Assets/CombinedAtlas"+ID);
        AssetDatabase.CreateAsset(renderer.sharedMaterial, "Assets/Combined/CombinedMaterial" + ID);
        AssetDatabase.CreateAsset(mesh, "Assets/Combined/CombinedMesh" + ID);
        AssetDatabase.SaveAssets();

    }


    [MenuItem("GameObject/Turn renderers off")]
    private static void TurnRenderersOff()
    {
        SwitchFilters(false);
    }

    [MenuItem("GameObject/Turn renderers on")]
    private static void TurnRenderersOn()
    {
        SwitchFilters(true);
    }

    private static void SwitchFilters(bool enabled)
    {
        var filters =
            Selection.GetTransforms(SelectionMode.Deep)
                .Select(p => p.GetComponent<MeshRenderer>())
                .Where(p => p != null);

        foreach (var filter in filters)
        {
            filter.enabled = enabled;
        }
    }
}
